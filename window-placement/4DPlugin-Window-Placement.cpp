/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-Window-Placement.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Window Placement
 #	author : miyako
 #	2019/07/29
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-Window-Placement.h"

#pragma mark -

#if VERSIONWIN
#include "Shlwapi.h" //PathRemoveFileSpec
HWND windowRefMdi = NULL;
#endif

void OnStartup() {
    
#if VERSIONWIN
    PA_ulong32 version = PA_Get4DVersion();
    
    if (version >= 16)
    {
        windowRefMdi = (HWND)PA_GetMainWindowHWND();
    }
    else
    {
        //the window class is the folder name of the application
        HWND mdi = NULL;
        wchar_t path[_MAX_PATH] = { 0 };
        wchar_t * applicationPath = wcscpy(path, (const wchar_t *)PA_GetApplicationFullPath().fString);
        //remove file name (4D.exe)
        PathRemoveFileSpec(path);
        //check instance as well, to be sure
        HINSTANCE h = (HINSTANCE)PA_Get4DHInstance();
        do {
            mdi = FindWindowEx(NULL, mdi, (LPCTSTR)path, NULL);
            if (mdi)
            {
                if (h == (HINSTANCE)GetWindowLongPtr(mdi, GWLP_HINSTANCE))
                {
                    break;
                }
            }
        } while (mdi);
        windowRefMdi = mdi;
    }
#endif
}

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
            case kInitPlugin :
            case kServerInitPlugin :
            OnStartup();
            break;
            
			// --- Window Placement
            
			case 1 :
				SET_WINDOW_PLACEMENT(params);
				break;
			case 2 :
				Get_window_placement(params);
				break;

        }

	}
	catch(...)
	{

	}
}

#pragma mark -

void SET_WINDOW_PLACEMENT(PA_PluginParameters params) {

	PA_WindowRef window = (PA_WindowRef)PA_GetLongParameter(params, 1);
    PA_ObjectRef options = PA_GetObjectParameter( params, 2 );
	HWND windowRef = NULL;

#if VERSIONWIN
    if(!window) 
	{
		windowRef = windowRefMdi;
	}
	else
	{
		windowRef = (HWND)PA_GetHWND(window);
	}

    if(windowRef)
    {
        WINDOWPLACEMENT placement;
        memset(&placement, 0x0, sizeof(WINDOWPLACEMENT));
        placement.length = sizeof(WINDOWPLACEMENT);
        
        if(ob_is_defined(options, L"flags"))
        {
            placement.flags = ob_get_n(options, L"flags");
        }
        if(ob_is_defined(options, L"showCmd"))
        {
            placement.showCmd = ob_get_n(options, L"showCmd");
        }
        if(ob_is_defined(options, L"ptMinPosition"))
        {
            PA_ObjectRef ptMinPosition = ob_get_o(options, L"ptMinPosition");
            if(ptMinPosition)
            {
                if(ob_is_defined(ptMinPosition, L"x"))
                {
                    placement.ptMinPosition.x = ob_get_n(ptMinPosition, L"x");
                }
                if(ob_is_defined(ptMinPosition, L"y"))
                {
                    placement.ptMinPosition.y = ob_get_n(ptMinPosition, L"y");
                }
            }
        }
        if(ob_is_defined(options, L"ptMaxPosition"))
        {
            PA_ObjectRef ptMaxPosition = ob_get_o(options, L"ptMaxPosition");
            if(ptMaxPosition)
            {
                if(ob_is_defined(ptMaxPosition, L"x"))
                {
                    placement.ptMaxPosition.x = ob_get_n(ptMaxPosition, L"x");
                }
                if(ob_is_defined(ptMaxPosition, L"y"))
                {
                    placement.ptMaxPosition.y = ob_get_n(ptMaxPosition, L"y");
                }
            }
        }
        if(ob_is_defined(options, L"rcNormalPosition"))
        {
            PA_ObjectRef rcNormalPosition = ob_get_o(options, L"rcNormalPosition");
            if(rcNormalPosition)
            {
                if(ob_is_defined(rcNormalPosition, L"left"))
                {
                    placement.rcNormalPosition.left = ob_get_n(rcNormalPosition, L"left");
                }
                if(ob_is_defined(rcNormalPosition, L"top"))
                {
                    placement.rcNormalPosition.top = ob_get_n(rcNormalPosition, L"top");
                }
                if(ob_is_defined(rcNormalPosition, L"right"))
                {
                    placement.rcNormalPosition.right = ob_get_n(rcNormalPosition, L"right");
                }
                if(ob_is_defined(rcNormalPosition, L"bottom"))
                {
                    placement.rcNormalPosition.bottom = ob_get_n(rcNormalPosition, L"bottom");
                }
            }
        }
        
        SetWindowPlacement(windowRef, &placement);
        
    }
#endif
}

void Get_window_placement(PA_PluginParameters params) {
    
    PA_ObjectRef returnValue = PA_CreateObject();    
	PA_WindowRef window = (PA_WindowRef)PA_GetLongParameter(params, 1);
	HWND windowRef = NULL;

#if VERSIONWIN
	if (!window)
	{
		windowRef = windowRefMdi;
	}
	else
	{
		windowRef = (HWND)PA_GetHWND(window);
	}
    if(windowRef)
    {
        WINDOWPLACEMENT placement;
        memset(&placement, 0x0, sizeof(WINDOWPLACEMENT));
        placement.length = sizeof(WINDOWPLACEMENT);
        
        if(GetWindowPlacement(windowRef, &placement))
        {
            ob_set_n(returnValue, L"flags", placement.flags);
            ob_set_n(returnValue, L"showCmd", placement.showCmd);
            
            PA_ObjectRef ptMinPosition = PA_CreateObject();
            ob_set_n(ptMinPosition, L"x", placement.ptMinPosition.x);
            ob_set_n(ptMinPosition, L"y", placement.ptMinPosition.y);
            ob_set_o(returnValue, L"ptMinPosition", ptMinPosition);
            
            PA_ObjectRef ptMaxPosition = PA_CreateObject();
            ob_set_n(ptMaxPosition, L"x", placement.ptMaxPosition.x);
            ob_set_n(ptMaxPosition, L"y", placement.ptMaxPosition.y);
            ob_set_o(returnValue, L"ptMaxPosition", ptMaxPosition);
            
            PA_ObjectRef rcNormalPosition = PA_CreateObject();
            ob_set_n(rcNormalPosition, L"left", placement.rcNormalPosition.left);
            ob_set_n(rcNormalPosition, L"top", placement.rcNormalPosition.top);
            ob_set_n(rcNormalPosition, L"right", placement.rcNormalPosition.right);
            ob_set_n(rcNormalPosition, L"bottom", placement.rcNormalPosition.bottom);
            ob_set_o(returnValue, L"rcNormalPosition", rcNormalPosition);

        }
        
    }
#endif
    PA_ReturnObject(params, returnValue);
}

